#==============================================
# Libraries
#==============================================
import pandas as pd
import plotly.express as px 
import folium
from haversine import haversine
import streamlit as st
from PIL import Image
from streamlit_folium import folium_static
from datetime import datetime

#==============================================
# Fun√ß√µes
#==============================================

# Fun√ß√£o para limpar o dataframe:
def clean_code(df):
    """ Essa fun√ß√£o tem a responsabilidade de limpar o dataframe.
    
        Tipos de limpeza:
        1. Remo√ß√£o dos NaN
        2. Remo√ß√£o dos espa√ßos das vari√°veis de texto
        3. Mudan√ßa do tipo da coluna de dados
        4. Formata√ß√£o da coluna de datas
        5. Limpeza da coluna de tempo (remo√ß√£o do texto da vari√°vel num√©rica)
        
        
        Tamb√©m foi resetado o index.
        
        Imput: Dataframe
        Output: Dataframe    
    """

    # Limpeza dos dados e transforma√ß√£o de vari√°veis:
    # Eliminando 'NaN ':
    df = df.loc[df['Delivery_person_Ratings'] != 'NaN ', :]
    df = df.loc[df['Weatherconditions'] != 'NaN ', :]
    df = df.loc[df['Road_traffic_density'] != 'NaN ', :]
    df = df.loc[df['multiple_deliveries'] != 'NaN ', :]
    df = df.loc[df['Festival'] != 'NaN ', :]
    df = df.loc[df['City'] != 'NaN ', :]
    df = df.loc[df['Delivery_person_Age'] != 'NaN ', :]

    # Eliminando espa√ßo no final das strings:
    df['City'] = df['City'].str.strip()
    df['Delivery_person_ID'] = df['Delivery_person_ID'].str.strip()
    df['Road_traffic_density'] = df['Road_traffic_density'].str.strip()
    df['Type_of_order'] = df['Type_of_order'].str.strip()
    df['Type_of_vehicle'] = df['Type_of_vehicle'].str.strip()
    df['Festival'] = df['Festival'].str.strip()
    df['City'] = df['City'].str.strip()

    # # Alterando vari√°veis de objeto para n√∫mero:
    df['Delivery_person_Age'] = df['Delivery_person_Age'].astype(int)
    df['Delivery_person_Ratings'] = df['Delivery_person_Ratings'].astype(float)
    df['multiple_deliveries'] = df['multiple_deliveries'].astype(int)

    # Alterando vari√°veis de objeto para data:
    df['Order_Date'] = pd.to_datetime(df['Order_Date'], format='%d-%m-%Y')

    # Limpando a coluna Time_taken:
    df['Time_taken(min)'] = df['Time_taken(min)'].apply(lambda x: x.split('(min) ')[1])
    df['Time_taken(min)'] = df['Time_taken(min)'].astype(int)

    # Resetando o index:
    df = df.reset_index(drop = True)
    
    return df

# Fun√ß√£o para obter os 10 entregadores mais lentos ou mais r√°pidos da cidade:
def top_delivers(df, top_asc):
    """ Essa fun√ß√£o calcula os 10 entregadores mais lentos ou mais r√°pidos por cidade.
        Ela utiliza as colunas Delivery_person_ID, City e Time_taken(min), agrupando por City e Delivery_person_ID e ordenando Time_taken(min) com respeito
        √† City. O par√¢metro top_asc deve ser definido como True ou False, a depender do tipo de ordena√ß√£o desejada (ascendente ou descendente).
        √â feita uma sele√ß√£o das 10 primeiras linhas por tipo de cidade e uma jun√ß√£o disso num novo dataframe.
        Essa fun√ß√£o n√£o exibe o dataframe, √© preciso um comando separado para isso.
        
        Input: Dataframe
        Output: Dataframe
    """
    #  Os 10 entregadores mais lentos ou mais r√°pidos por cidade
    df_aux1 = (df.loc[:, ['Delivery_person_ID', 'City', 'Time_taken(min)']]
                 .groupby(['City', 'Delivery_person_ID'])
                 .mean()
                 .sort_values(['City', 'Time_taken(min)'], ascending=top_asc)
                 .reset_index())

    df_aux2 = df_aux1.loc[df_aux1['City'] == 'Metropolitian',:].head(10)
    df_aux3 = df_aux1.loc[df_aux1['City'] == 'Urban',:].head(10)
    df_aux4 = df_aux1.loc[df_aux1['City'] == 'Semi-Urban',:].head(10)

    df_aux5 = pd.concat([df_aux2, df_aux3, df_aux4]).reset_index(drop=True)    

    return df_aux5
                                
# -------------------------------------------- In√≠cio da estrutura l√≥gica do c√≥digo ----------------------------------------------------------------

#==============================================
# Import dataset
#==============================================
df_original = pd.read_csv('dataset/train.csv')

#==============================================
# Limpeza dos dados
#==============================================
df = clean_code(df_original)

#==============================================
# Configura√ß√£o da largura da p√°gina
#==============================================
st.set_page_config(page_title='Vis√£o Entregadores', page_icon='üöö', layout='wide')

#==============================================
# Barra Lateral
#==============================================
st.markdown('# Marketplace - Vis√£o Entregadores')

image = Image.open('logo.png')
st.sidebar.image(image, width=120)

st.sidebar.markdown('# Curry Company')
st.sidebar.markdown('## Fastest Delivery in Town')
st.sidebar.markdown("""___""")

st.sidebar.markdown('## Selecione uma data limite')

date_slider = st.sidebar.slider('At√© qual valor?',
                                value=datetime(2022, 4, 13),
                                min_value=datetime(2022, 2, 11),
                                max_value=datetime(2022, 4, 6),
                                format='DD-MM-YYYY')

st.sidebar.markdown("""___""")

traffic_options = st.sidebar.multiselect('Quais as condi√ß√µes do tr√¢nsito?',
                                        ['Low', 'Medium', 'High', 'Jam'],
                                         default=['Low', 'Medium', 'High', 'Jam'])

st.sidebar.markdown("""___""")

st.sidebar.markdown('### Powered by CDS')

# Filtro de data:
linhas_selecionadas = df['Order_Date'] < date_slider
df = df.loc[linhas_selecionadas, :]

# Filtro de tr√¢nsito:
linhas_selecionadas = df['Road_traffic_density'].isin(traffic_options)
df = df.loc[linhas_selecionadas, :]

#==============================================
# Layout no streamlit
#==============================================
tab1, tab2, tab3 = st.tabs(['Vis√£o Gerencial', '_', '_'])

with tab1:
    with st.container():
        st.markdown('## Overall metrics')
        
        col1, col2, col3, col4 = st.columns(4, gap = 'large')
        
        with col1:
            
            # A maior idade dos entregadores:
            maior_idade = df.loc[:, 'Delivery_person_Age'].max()
            
            col1.metric('Maior idade', maior_idade)
        
        with col2:
            
             # A menor idade dos entregadores:            
            menor_idade = df.loc[:, 'Delivery_person_Age'].min() # Poderia fazer tamb√©m sort_values
            
            col2.metric('Menor idade', menor_idade)
        
        with col3:
           
            # A melhor condi√ß√£o de ve√≠culos:
            melhor_condicao = df.loc[:, 'Vehicle_condition'].max()
            
            col3.metric('Melhor condi√ß√£o', melhor_condicao)
            
            
        with col4:
           
            # A pior condi√ß√£o de ve√≠culos:
            pior_condicao = df.loc[:, 'Vehicle_condition'].min()
            
            col4.metric('Pior condi√ß√£o', pior_condicao)
            
    with st.container():
        st.markdown("""____""")
        st.markdown('## Avalia√ß√µes')
        
        col1, col2 = st.columns(2)
        
        with col1:
            st.markdown('##### Avalia√ß√£o m√©dia por entregador')
            
            # A avalia√ß√£o m√©dia por entregador:
            df_avg_rating_by_deliver = (df.loc[:, ['Delivery_person_Ratings', 'Delivery_person_ID']]
                                          .groupby('Delivery_person_ID')
                                          .mean()
                                          .reset_index())
            st.dataframe(df_avg_rating_by_deliver, use_container_width=True)
            
        with col2:
            st.markdown( '##### Avalia√ß√£o m√©dia por tr√¢nsito' )
            
            # A avalia√ß√£o m√©dia e o desvio padr√£o por tipo de tr√°fego
            df_avg_std_rating_by_traffic = (df.loc[:, ['Delivery_person_Ratings', 'Road_traffic_density']]
                                              .groupby('Road_traffic_density')
                                              .agg({'Delivery_person_Ratings': ['mean','std']})) 

            df_avg_std_rating_by_traffic.columns = ['delivery_mean', 'delivery_std']

            df_avg_std_rating_by_traffic = df_avg_std_rating_by_traffic.reset_index()

            st.dataframe(df_avg_std_rating_by_traffic, use_container_width=True)
            
            st.markdown('##### Avalia√ß√£o m√©dia por clima')
            
            # A avalia√ß√£o m√©dia e o desvio padr√£o por condi√ß√µes clim√°ticas
            df_avg_std_rating_by_weather = (df.loc[:, ['Delivery_person_Ratings', 'Weatherconditions']]
                                              .groupby('Weatherconditions')
                                              .agg({'Delivery_person_Ratings': ['mean','std']})) 

            df_avg_std_rating_by_weather.columns = ['delivery_mean', 'delivery_std']

            df_avg_std_rating_by_weather = df_avg_std_rating_by_weather.reset_index()

            st.dataframe(df_avg_std_rating_by_weather, use_container_width=True)
            
        with st.container():
            st.markdown("""____""")
            st.markdown('## Velocidade de entrega')
            
            col1, col2 = st.columns(2)
            
            with col1:
                st.markdown('##### Top entregadores mais r√°pidos')
                
                # Os 10 entregadores mais r√°pidos por cidade
                
                df_aux5 = top_delivers(df, top_asc=True)
                
                st.dataframe(df_aux5, use_container_width=True)
                
            with col2:
                st.markdown('##### Top entregadores mais lentos')
                
                # Os 10 entregadores mais lentos por cidade
                
                df_aux5 = top_delivers(df, top_asc=False)      
                
                st.dataframe(df_aux5, use_container_width=True)